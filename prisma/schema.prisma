generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// ========== 业务表 ==========
model AccountRequest {
  id               String   @id
  company_name     String
  contact_person   String
  email            String
  phone            String
  website          String?
  business_address String
  created_at       DateTime @default(now())
  approved         Boolean  @default(false)
}

model Image {
  id        Int      @id @default(autoincrement())
  src       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  productId Int
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Video {
  id        Int      @id @default(autoincrement())
  video     String
  thumbnail String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  productId Int
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Product {
  id         Int         @id @default(autoincrement())
  title      String
  des        String
  price      Decimal     @db.Decimal(12, 2)
  dimensions Json
  status     Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  Image      Image[]
  OrderItem  OrderItem[]
  Video      Video[]
}

/// ========== 客户主数据（无账号也有）==========
model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  company   String?
  abn       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  users  User[]
  orders Order[]

  @@index([email])
  @@index([phone])
}

/// ========== 用户 ==========
model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  label        UserLabel
  email        String        @unique
  password     String
  retailerTier RetailerTier?
  name         String

  // 过渡期：可空；回填完成后改为必填
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  orders Order[]
}

/// ========== 订单 & 订单项 ==========
model Order {
  id Int @id @default(autoincrement())

  // 过渡期：可空（历史代下单/未登录数据）；你网站若要求登录下单，回填后可设为必填
  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // 新增归属客户（统一聚合历史）；过渡期可空，回填后设为必填
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // 快照字段（下单当时的信息，发票/审计用）
  shippingAddress String
  position        String
  createdAt       DateTime      @default(now())
  customerEmail   String
  customerName    String
  customerPhone   String
  barcodeAll      Boolean       @default(false)
  packageType     PackageType
  note            String?
  paidAt          DateTime?
  paymentStatus   PaymentStatus @default(unpaid)
  status          OrderStatus   @default(pending)
  updatedAt       DateTime      @default(now()) @updatedAt

  items OrderItem[]

  @@index([createdAt])
  @@index([status])
  @@index([paymentStatus])
  @@index([customerId])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
  @@index([orderId])
  @@index([productId])
}

/// ========== 枚举 ==========
enum OrderStatus {
  pending
  confirmed
  paid
  packed
  shipped
  completed
  cancelled
}

enum PaymentStatus {
  unpaid
  paid
  refunded
}

enum RetailerTier {
  TIER_1
  TIER_2
  TIER_3
}

enum UserLabel {
  RETAILER
  INTERNAL
  VIP
}

enum PackageType {
  boxes
  opp
}
